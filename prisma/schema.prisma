// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  // previewFeatures = ["referentialIntegrity"] // referentialIntegrity => 객체를 연결할때 그 객체가 존재해야 한다 ( FK )
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  relationMode = "prisma"
}

model Book {
  isbn Int @id @default(autoincrement())
  writer Writer @relation(fields: [writerId], references: [id])
  writerId Int
  Translator Translator @relation(fields: [translatorId], references: [id])
  translatorId Int
  Category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  Artist Artist @relation(fields: [artistId], references: [id])
  artistId Int
  Publisher Publisher @relation(fields: [publisherId], references: [id])
  publisherId Int
  eventAndBookId Int?
  title String 
  price Int
  bookDescription String
  listeningYn String
  macYn String
  windowYn String
  androidYn String
  iosYn String
  fileType String
  fileSize String
  textCount String
  bookContents String
  score String
  imagePath String
  createUser String
  createDt DateTime @default(now())
  updateUser String
  updateDt DateTime @updatedAt

  @@index([writerId])
  @@index([translatorId])
  @@index([categoryId])
  @@index([artistId])
  @@index([publisherId])
}

model Artist {
  id Int @id @default(autoincrement())
  name String
  description String
  nationality String
  birth String
  education String
  career String
  awards String
  createUser String
  createDt DateTime @default(now())
  updateUser String
  updateDt DateTime @updatedAt
  books Book[]
}

model BookAndBookSeries {
  id Int @id @default(autoincrement())
  bookId Int
  bookseriesId Int
  createUser String
  createDt DateTime @default(now())
  updateUser String
  updateDt DateTime @updatedAt
}

model BookSeries {
  id Int @id @default(autoincrement())
  finishYn String
  count Int
  createUser String
  createDt DateTime @default(now())
  updateUser String
  updateDt DateTime @updatedAt
}

model Category {
  id Int @id @default(autoincrement())
  eventAndCategoryId Int?
  name String @unique
  parentName String
  useYn UseYn
  createUser String
  createDt DateTime @default(now())
  updateUser String
  updateDt DateTime @updatedAt
  books Book[]
}

model Publisher {
  id Int @id @default(autoincrement())
  name String
  description String
  nationality String
  birth String
  education String
  career String
  awards String
  createUser String
  createDt DateTime @default(now())
  updateUser String
  updateDt DateTime @updatedAt
  books Book[]
}

model Translator {
  id Int @id @default(autoincrement())
  name String
  description String
  nationality String
  birth String
  education String
  career String
  awards String
  createUser String
  createDt DateTime @default(now())
  updateUser String
  updateDt DateTime @updatedAt
  books Book[]
}

model Writer {
  id Int @id @default(autoincrement())
  name String
  description String
  nationality String
  birth String
  education String
  career String
  awards String
  createUser String
  createDt DateTime @default(now())
  updateUser String
  updateDt DateTime @updatedAt
  books Book[]
}

model Event {
  id Int @id @default(autoincrement())
  filePath String
  title String
  contents String
  useYn UseYn
  createUser String
  createDt DateTime @default(now())
  updateUser String
  updateDt DateTime @updatedAt
}

model EventAndBook {
  id Int @id @default(autoincrement())
  bookId Int
  evnetId Int
  createUser String
  createDt DateTime @default(now())
  updateUser String
  updateDt DateTime @updatedAt
}

model EventAndCategory {
  id Int @id @default(autoincrement())
  eventId Int
  categoryId Int
  createUser String
  createDt DateTime @default(now())
  updateUser String
  updateDt DateTime @updatedAt
}

model Review {
  id Int @id @default(autoincrement())
}

model BuyHistory {
  id Int @id @default(autoincrement())
  userId String
  aid String?
  cid String
  tid String?
  paymentType PaymentType?
  partnerOrderId String
  partnerUserId String
  itemName String
  itemCode String
  quantity Int
  totalAmount Int
  vatAmount Int?
  redirectMobile String?
  redirectApp String?
  redirectPc String?
  success Boolean @default(false)
  errorCode String?
  errorMsg String?
  paymentCreated String?
  paymentApproved String?
  expirationPeriod String?
  createUser String
  createDt DateTime @default(now())
  updateUser String
  updateDt DateTime @updatedAt
}

model User {
  id String @id 
  email String @unique
  password String
  name String
  type LoginType
  loginCount Int @default(1)
  role Role @default(USER)
  token String?
  createUser String
  createDt DateTime @default(now())
  updateUser String
  updateDt DateTime @updatedAt
}

enum PaymentType {
  CARD
  MONEY
}

enum Role {
  USER
  ADMIN
}

enum LoginType {
  KAKAO
  NAVER
  EMAIL
}

enum UseYn {
  Y
  N
}